{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"multiprocessing","provenance":[{"file_id":"/v2/external/notebooks/empty.ipynb","timestamp":1621592003842}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"lIYdn1woOS1n","executionInfo":{"status":"ok","timestamp":1635781085293,"user_tz":0,"elapsed":39,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}}},"source":["import time\n","import os"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZBQhgh-TVpUZ","executionInfo":{"status":"ok","timestamp":1635781085293,"user_tz":0,"elapsed":37,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"fda2e4c5-387c-497f-cb83-a4a304e77495"},"source":["import multiprocessing as mp\n","mp.cpu_count()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Si_Oi0apccvc","executionInfo":{"status":"ok","timestamp":1635781085294,"user_tz":0,"elapsed":34,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"9ed2a745-368d-4a74-b687-5cfb59885e39"},"source":["! python -V"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Python 3.7.12\n"]}]},{"cell_type":"markdown","metadata":{"id":"iJz6ZlDI7MZB"},"source":["# Single Process\n","按照顺序，逐步执行."]},{"cell_type":"code","metadata":{"id":"OaJsmrbk6q1e"},"source":["def long_time_task():\n","    print(f'当前进程: {os.getpid()}')\n","    time.sleep(2)\n","    print(f\"结果: {8 ** 20}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1AbGfLUW6uiH","executionInfo":{"elapsed":4162,"status":"ok","timestamp":1621533417662,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"1796ef40-eddb-4aa1-d6c4-f9ee11fc4f19"},"source":["print(f'当前母进程: {os.getpid()}')\n","start = time.time()\n","for i in range(2):\n","    long_time_task()\n","\n","end = time.time()\n","print(f\"用时{(end-start)}秒\")"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["当前母进程: 58\n","当前进程: 58\n","结果: 1152921504606846976\n","当前进程: 58\n","结果: 1152921504606846976\n","用时4.004814386367798秒\n"]}]},{"cell_type":"markdown","metadata":{"id":"tGJhvg9X7E84"},"source":["# Multi-Processing\n","The multiprocessing package offers both local and remote concurrency, effectively side-stepping the `Global Interpreter Lock` by using `subprocesses` instead of `threads`.\n","\n",">In Python, the `Global Interpreter Lock (GIL)` is a `lock` that allows **only a single thread to control the Python interpreter**.<br> \n","- In the case of `multithreading`, which is primarily used for `IO-bound` jobs, `GIL` doesn’t have much impact as the **lock is shared between threads while they are waiting for `I/O`**. <br>\n","- `Multiprocessing`, on the other hand, **allocates a Python Interpreter and GIL to every process**.\n","\n","reference:\n","-  [How to Use the Multiprocessing Package in Python](https://towardsdatascience.com/how-to-use-the-multiprocessing-package-in-python3-a1c808415ec2) - Flyte/Lyft"]},{"cell_type":"markdown","metadata":{"id":"IrryBRZ789Im"},"source":["# Process Class\n","The Process class in multiprocessing **allocates all the tasks in the memory in one go**. \n","\n","Every task created using the `Process` class has to have a **separate memory allocated**.\n"]},{"cell_type":"code","metadata":{"id":"sqOB52C171je"},"source":["def long_time_task(i):\n","    print(f'子进程: {os.getpid()} - 任务{i}')\n","    time.sleep(2)\n","    print(f\"结果: {8 ** 20}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_eVDJ7YM7TP5","executionInfo":{"status":"ok","timestamp":1634920928527,"user_tz":-60,"elapsed":2291,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"e2fd5980-cacc-4b87-a4bc-40aaaf6974a6"},"source":["from multiprocessing import Process\n","\n","print('当前母进程: {}'.format(os.getpid()))\n","start = time.time()\n","p1 = Process(target=long_time_task, args=(1,))\n","p2 = Process(target=long_time_task, args=(2,))\n","\n","print('等待所有子进程完成。')\n","p1.start()\n","p2.start()\n","p1.join()\n","p2.join()\n","end = time.time()\n","\n","print(\"总共用时{}秒\".format((end - start)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["当前母进程: 66\n","等待所有子进程完成。\n","子进程: 111 - 任务1\n","子进程: 112 - 任务2\n","结果: 1152921504606846976\n","结果: 1152921504606846976\n","总共用时2.040834426879883秒\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OwzTr2BkYgbK","executionInfo":{"status":"ok","timestamp":1634920932383,"user_tz":-60,"elapsed":1525,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"972a25ce-689a-4637-a82c-e4ecc687a90d"},"source":["import time\n","from multiprocessing import Process\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    print(x * x * x)\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","\n","\n","if __name__ == \"__main__\":\n","    processes = []\n","    for i in range(10):\n","        # initiate a process\n","        p = Process(target=cube, args=(i,))\n","        processes.append(p)\n","        p.start()  # commence the process\n","\n","    # All the processes have been looped over to wait until every process execution is complete\n","    for p in processes:\n","        p.join()\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start process 0\n","start process 1\n","0\n","start process 2\n","1\n","8\n","start process 3\n","start process 4\n","64\n","27\n","start process 5\n","start process 6\n","125\n","216\n","start process 7\n","343\n","start process 8\n","512\n","start process 9\n","729\n","end process 0\n","end process 1\n","end process 2\n","end process 4\n","end process 3\n","end process 5\n","end process 6\n","end process 7\n","end process 8\n","end process 9\n"]}]},{"cell_type":"markdown","metadata":{"id":"hp16dEsdaomS"},"source":["## Pipe\n","If two processes need to communicate, Pipe’s the best choice. A pipe can have two end-points where each has `send()` and `recv()` methods. Data in a pipe could get corrupted if two processes (threads) read from or write to the same end-point simultaneously."]},{"cell_type":"markdown","metadata":{"id":"cmOnvcnzauG4"},"source":["## Queue\n","To store the output of multiple processes in a shared communication channel, a `queue` can be used. \n","\n","For instance, assume that the task is to find the cubes of the first ten natural numbers followed by adding 1 to each number."]},{"cell_type":"code","metadata":{"id":"crIF7sZDbK3h"},"source":["from multiprocessing import Process, Queue\n"," \n"," \n","def cube(x, q):\n","    q.put(x * x * x)\n"," \n"," \n","def add(x, q):\n","    q.put(x + 1)\n","\n","if __name__ == \"__main__\":\n","    q = Queue()\n","    processes = []\n","    for i in range(10):  # add 10 cubes to queue\n","        p = Process(target=cube, args=(i, q,))\n","        processes.append(p)\n","        p.start()\n"," \n","    for p in processes:\n","        p.join()\n"," \n","    processes = []\n","    print(\"INITIAL VALUES: \")\n","    while not q.empty():  # consuming queue, and call add\n","        val = q.get()\n","        print(val)\n","        p = Process(target=add, args=(val, q,))\n","        processes.append(p)\n","        p.start()\n","\n","    for p in processes:\n","        p.join()\n"," \n","    print(\"FINAL VALUES: \")\n","    while not q.empty():\n","        print(q.get())  "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8jYYgC-Z7u3i"},"source":["# Pool Class\n","\n","The `Pool` class in `multiprocessing` can handle an enormous number of processes. It allows you to run multiple jobs per process (due to its ability to queue the jobs). \n","\n","The memory is allocated only to the executing processes, unlike the `Process` class, which allocates memory to all the processes. The Pool class takes the number of worker processes to be present in the pool and spawns the processes.\n","\n","A prime example of this is the `Pool` object which offers a convenient means of parallelizing the execution of a function across multiple input values, distributing the input data across processes (**data parallelism**)."]},{"cell_type":"markdown","metadata":{"id":"GZ9j-dBUc2Rq"},"source":["## apply\n","`apply()` method blocks the primary process until all the processes are complete. It accepts multiple arguments, **maintains the order of the result**, and **isn’t concurrent**."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xkUYgyNveKLH","executionInfo":{"elapsed":10409,"status":"ok","timestamp":1634377193299,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"e337a6c4-6c70-4bd3-80d5-1132253f4e13"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    return result\n","\n","\n","if __name__ == \"__main__\":\n","    ts = time.time()\n","    pool = Pool(processes=4)\n","    print([pool.apply(cube, args=(x,)) for x in range(10)])\n","    pool.close()\n","    pool.join()\n","    print(\"Time in parallel:\", time.time() - ts)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 0\n","end process 0\n","start process 1\n","end process 1\n","start process 2\n","end process 2\n","start process 3\n","end process 3\n","start process 4\n","end process 4\n","start process 5\n","end process 5\n","start process 6\n","end process 6\n","start process 7\n","end process 7\n","start process 8\n","end process 8\n","start process 9\n","end process 9\n","[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n","Time in parallel: 10.165384769439697\n"]}]},{"cell_type":"markdown","metadata":{"id":"FZso4GT1cyBG"},"source":["## [map](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map)\n","`map()` method supports concurrency — doesn’t accept multiple arguments and blocks the main program until all the processes are complete. \n","- It also maintains the order of the result (return)\n","- although the computation order could differ!\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZTntljD7esMX","executionInfo":{"elapsed":2344,"status":"ok","timestamp":1634377334845,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"4d6fba53-01c6-4356-a19e-5bc2e392778f"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    return result\n","\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    print(pool.map(cube, range(5)))\n","    pool.close()\n","    pool.join()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 1\n","start process 0\n","start process 3\n","start process 2\n","end process 3\n","end process 1\n","start process 4\n","end process 0\n","end process 2\n","end process 4\n","[0, 1, 8, 27, 64]\n"]}]},{"cell_type":"code","metadata":{"id":"ZbYeBwdSexmo"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    print(result)  \n","    # if you do save record here. Save record won't be in the right sequence\n","\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    print(pool.map(cube, range(5)))\n","    pool.close()\n","    pool.join()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"25KEoCOafl17","executionInfo":{"elapsed":2308,"status":"ok","timestamp":1634378114316,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"c8eb43a5-127b-4e94-816a-cc1e6eb4bad2"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","\n","    # map只是return的时候有顺序，这种save之类的是没有顺序的\n","    with open(\"./cube.txt\", \"a\") as f: \n","        f.write(f\"{result}\\n\")\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    pool.map(cube, range(5))\n","    pool.close()\n","    pool.join()\n","    print(\"writing finished\")\n","    with open(\"./cube.txt\", \"r\") as f:\n","        content = f.read().splitlines()\n","    print(content)\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 0\n","start process 1\n","start process 2\n","start process 3\n","end process 0\n","start process 4\n","end process 1\n","end process 2\n","end process 3\n","end process 4\n","writing finished\n","['0', '1', '27', '8', '64']\n"]}]},{"cell_type":"markdown","metadata":{"id":"BPo7gLg3cquH"},"source":["## apply_async\n","A callback function in `apply_async()` can be used to return the value immediately after its execution is complete. \n","\n","This method maintains the order of the result and supports `concurrency`."]},{"cell_type":"code","metadata":{"id":"wJUZE1Mv9E3f"},"source":["from multiprocessing import Pool, cpu_count"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wq3nQ7wD9TkZ"},"source":["def long_time_task(i):\n","    print(f'子进程: {os.getpid()} - 任务{i}')\n","    time.sleep(2)\n","    print(f\"结果: {8 ** 20}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OruR8vh29VvX","executionInfo":{"elapsed":6034,"status":"ok","timestamp":1634378442346,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"1ccb9218-5b0a-4a5d-9554-a3220b36f35c"},"source":["if __name__=='__main__':\n","    print(f\"CPU内核数:{cpu_count()}\")\n","    print(f'当前母进程: {os.getpid()}')\n","    \n","    start = time.time()\n","    p = Pool(cpu_count())\n","    for i in range(5):\n","        p.apply_async(long_time_task, args=(i,))\n","    \n","    print('等待所有子进程完成。')\n","    p.close()\n","    p.join()\n","    \n","    end = time.time()\n","    print(\"总共用时{}秒\".format((end - start)))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["CPU内核数:2\n","当前母进程: 68\n","子进程: 13567 - 任务0\n","子进程: 13568 - 任务1\n","等待所有子进程完成。\n","结果: 1152921504606846976\n","子进程: 13567 - 任务2\n","结果: 1152921504606846976\n","子进程: 13568 - 任务3\n","结果: 1152921504606846976\n","子进程: 13567 - 任务4\n","结果: 1152921504606846976\n","结果: 1152921504606846976\n","总共用时6.141690015792847秒\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7_obweQVjBla","executionInfo":{"elapsed":5382,"status":"ok","timestamp":1634378469857,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"2b4f909f-c51f-4852-fb81-1ad80f30945f"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def collect_result(val):\n","    return val\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    return x * x * x\n","\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    for x in range(5):\n","        print(pool.apply_async(cube, args=(x,), callback=collect_result).get())\n","    pool.close()\n","    pool.join()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 0\n","end process 0\n","start process 1\n","0\n","end process 1\n","start process 2\n","1\n","end process 2\n","start process 3\n","8\n","end process 3\n","start process 4\n","27\n","end process 4\n","64\n"]}]},{"cell_type":"markdown","metadata":{"id":"KTNNtUIyjMp7"},"source":["## map_async\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6BmUbxvjPxP","executionInfo":{"elapsed":3288,"status":"ok","timestamp":1634378609962,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"f0a0837f-6c5e-4eb9-dc67-ed89608a93e0"},"source":["import time\n","from multiprocessing import Pool\n","\n","\n","def collect_result(val):\n","    return val\n","\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    return x * x * x\n","\n","\n","def cube_print(x):\n","    print(x * x * x)\n","\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    print(pool.map_async(cube, range(10), callback=collect_result).get())\n","    pool.map_async(cube_print, range(10))\n","    print(\"HERE!\")\n","    print(\"HERE AGAIN!\")\n","    pool.close()\n","    pool.join()\n","\n","# 这个python版本有问题... 我本地跑起来HERE! 都是在最后一个print list之前的\n","# “HERE” and “HERE AGAIN” are written to the console when map_async() runs, \n","# showcasing its non-blocking nature. However, you can use wait() to block the asynchronous calls."],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 0\n","start process 1\n","start process 2\n","start process 3\n","end process 0\n","start process 4\n","end process 1\n","end process 2\n","start process 5\n","start process 6\n","end process 3\n","start process 7\n","end process 4\n","start process 8\n","end process 5\n","end process 6\n","end process 7\n","start process 9\n","end process 8\n","end process 9\n","1\n","27\n","64\n","125\n","216\n","8\n","0\n","729\n","343\n","512\n","[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n","HERE!\n","HERE AGAIN!\n"]}]},{"cell_type":"markdown","metadata":{"id":"CIE1-2D3nNWi"},"source":["## imap\n","1. `pool.imap(func, input)`: `input` 可以是`iterable`, `iterator`. <br>\n","下面那个`pd.DataFrame`作为`input`的例子特别好.\n","2. `imap`的output是个`Iterator`, 所以通常是用`for loop`, 来不停iterate\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5WxFTG0nP9J","executionInfo":{"elapsed":1989,"status":"ok","timestamp":1634379707661,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"5e0523cd-39bc-4131-aad3-dfcaf56b9aa4"},"source":["import time\n","from multiprocessing import Pool\n","\n","tmp_file\n","\n","def cube(x):\n","    print(f\"start process {x}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    return result\n","\n","\n","if __name__ == \"__main__\":\n","    pool = Pool(processes=4)\n","    for each_item in pool.imap(cube, range(5)):\n","        print(each_item)\n","    pool.close()\n","    # pool.join()  # join好像没啥用啊...\n","    print(\"this should be last line\")\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["start process 2\n","start process 0\n","start process 3\n","start process 1\n","end process 1\n","end process 3\n","start process 4\n","end process 0\n","end process 2\n","0\n","1\n","8\n","27\n","end process 4\n","64\n","this should be last line\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I428DR4ZnZPb","executionInfo":{"status":"ok","timestamp":1634563698419,"user_tz":-60,"elapsed":2309,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"2f588498-75e3-4f52-aabd-9699ab9e6279"},"source":["import os\n","import time\n","from multiprocessing import Pool\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","def cube(x):\n","    print(f\"start process {x}: {os.getpid()}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    \n","    # save order won't be guaranteed\n","    with open(tmp_file, \"a\") as f:\n","        f.write(f\"{result}\\n\")\n","    print(f\"end process {x}: {os.getpid()}\")\n","    return result\n","\n","if __name__ == \"__main__\":\n","    res = []\n","    with Pool(processes=4) as pool:\n","        for each_item in pool.imap(cube, range(5)):  # range(5) is iterable\n","            res.append(each_item)\n","            print(f\"##### current process #####: {os.getpid()}\")\n","    \n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n","    print(f\"returned results: {res}\")\n","    print(f\"current process: {os.getpid()}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start process 2: 1677\n","start process 0: 1675\n","start process 3: 1678\n","start process 1: 1676\n","end process 2: 1677\n","start process 4: 1677\n","end process 1: 1676\n","end process 0: 1675\n","end process 3: 1678\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","end process 4: 1677\n","##### current process #####: 67\n","show content: ['8\\n', '0\\n', '27\\n', '1\\n', '64\\n']\n","returned results: [0, 1, 8, 27, 64]\n","current process: 67\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7n0wItjwsfRI","executionInfo":{"status":"ok","timestamp":1634563719924,"user_tz":-60,"elapsed":3395,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"4f4bbc16-4e1f-40e3-eae7-f457e9ceb9b1"},"source":["import os \n","import time\n","from multiprocessing import Pool\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","def cube(x):\n","    print(f\"start process {x}: {os.getpid()}\")\n","    result = x * x * x\n","    time.sleep(1)\n","    print(f\"end process {x}: {os.getpid()}\")\n","    \n","    # save order won't be guaranteed    \n","    with open(tmp_file, \"a\") as f:\n","        f.write(f\"{result}\\n\")\n","    # return result\n","\n","if __name__ == \"__main__\":\n","    data = list(range(12))  # 用list作为imap的input\n","    with Pool(processes=4) as pool:\n","        for each_item in pool.imap(cube, data):  # 这便是自动做iteration的\n","            each_item\n","            print(f\"##### current process #####: {os.getpid()}\")\n","    # pool.join()\n","    print(\"this should be 2nd last line\")\n","\n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n","    print(f\"current process: {os.getpid()}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start process 1: 1707\n","start process 2: 1708\n","start process 0: 1706\n","start process 3: 1709\n","end process 1: 1707\n","start process 4: 1707\n","end process 0: 1706\n","start process 5: 1706\n","end process 2: 1708\n","end process 3: 1709\n","start process 6: 1708\n","start process 7: 1709\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","end process 4: 1707\n","start process 8: 1707\n","end process 5: 1706\n","end process 6: 1708\n","start process 9: 1706\n","start process 10: 1708\n","end process 7: 1709\n","start process 11: 1709\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","end process 8: 1707\n","end process 11: 1709\n","end process 10: 1708\n","end process 9: 1706\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","##### current process #####: 67\n","this should be 2nd last line\n","show content: ['1\\n', '0\\n', '8\\n', '27\\n', '64\\n', '125\\n', '216\\n', '343\\n', '512\\n', '1000\\n', '729\\n', '1331\\n']\n","current process: 67\n"]}]},{"cell_type":"markdown","metadata":{"id":"xN-Bige-kzSs"},"source":["## imap_unordered"]},{"cell_type":"markdown","metadata":{"id":"qR4UiDg9Cbn_"},"source":["### `imap_unordered` with `List`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YKcrFVmflHZE","executionInfo":{"status":"ok","timestamp":1635781462892,"user_tz":0,"elapsed":3672,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"0013323c-6b85-416f-fbb9-18d3ba508227"},"source":["import os\n","import time\n","from typing import List, Tuple\n","from multiprocessing import Pool\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","def cube(x: List[int]):\n","    print(f\"start process {os.getpid()}: {x}\")\n","    result = x[0] * x[1]\n","    time.sleep(1)\n","    \n","    with open(tmp_file, \"a\") as f:\n","        f.write(f\"{result}\\n\")\n","    print(f\"end process {os.getpid()}: {x}\")\n","    \n","    return result\n","    \n","\n","if __name__ == \"__main__\":\n","    data = [[i, 2] for i in range(12)]\n","    # [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2], ...]\n","    result = []\n","    \n","    with Pool(processes=4) as pool:\n","        for each_item in pool.imap_unordered(cube, data):\n","            result.append(each_item)\n","            print(f\"##### current process #####: {os.getpid()}\")\n","    \n","    pool.join()  # wait for the worker processes to terminate\n","\n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n","    print(f\"results: {result}\")\n","    print(f\"final process: {os.getpid()}\")"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["start process 279: [2, 2]\n","start process 277: [1, 2]\n","start process 278: [3, 2]\n","start process 276: [0, 2]\n","end process 279: [2, 2]\n","start process 279: [4, 2]\n","end process 276: [0, 2]\n","start process 276: [5, 2]\n","end process 278: [3, 2]\n","end process 277: [1, 2]\n","start process 278: [6, 2]\n","start process 277: [7, 2]\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","end process 279: [4, 2]\n","start process 279: [8, 2]\n","end process 276: [5, 2]\n","start process 276: [9, 2]\n","end process 278: [6, 2]\n","start process 278: [10, 2]\n","end process 277: [7, 2]\n","start process 277: [11, 2]\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","end process 279: [8, 2]\n","end process 276: [9, 2]\n","end process 278: [10, 2]\n","end process 277: [11, 2]\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","show content: ['4\\n', '2\\n', '0\\n', '6\\n', '8\\n', '10\\n', '12\\n', '14\\n', '16\\n', '18\\n', '20\\n', '22\\n']\n","results: [4, 0, 6, 2, 8, 10, 12, 14, 16, 18, 20, 22]\n","final process: 66\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HRiNKmLwXHrO","executionInfo":{"status":"ok","timestamp":1634564008553,"user_tz":-60,"elapsed":2346,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"1046f4ab-2af4-433d-c81d-0fbd77c3ff24"},"source":["import os\n","import time\n","from typing import List, Tuple\n","from multiprocessing import Pool\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","def cube(x: List[int]):\n","    print(f\"start process {x}\")\n","    result = x[0] * x[1]\n","    time.sleep(1)\n","    \n","    print(f\"end process {x}\")\n","    \n","    return result\n","    \n","\n","if __name__ == \"__main__\":\n","    data = [[0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [5, 2], [6, 2]]\n","    result = []\n","    \n","    with open(tmp_file, \"a\") as f:\n","        with Pool(processes=4) as pool:\n","            for each_item in pool.imap_unordered(cube, data):        \n","                f.write(f\"{each_item}\\n\")\n","                result.append(each_item)\n","    pool.join()\n","    print(\"this should be 2nd last line\")\n","\n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n","    print(f\"results: {result}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start process [1, 2]\n","start process [2, 2]\n","start process [0, 2]\n","start process [3, 2]\n","end process [2, 2]\n","end process [1, 2]\n","end process [0, 2]\n","start process [4, 2]\n","start process [5, 2]\n","start process [6, 2]\n","end process [3, 2]\n","end process [5, 2]\n","end process [4, 2]\n","end process [6, 2]\n","this should be 2nd last line\n","show content: ['4\\n', '0\\n', '2\\n', '6\\n', '10\\n', '8\\n', '12\\n']\n","results: [4, 0, 2, 6, 10, 8, 12]\n"]}]},{"cell_type":"markdown","metadata":{"id":"M4xByfytJuJy"},"source":["### `imap_unordered` with enumerate"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vKx0yve4KLch","executionInfo":{"status":"ok","timestamp":1635781306018,"user_tz":0,"elapsed":290,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"7a9f247f-5f50-4a65-fb1d-845c7022ff21"},"source":["list(enumerate(range(5,10)))"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, 5), (1, 6), (2, 7), (3, 8), (4, 9)]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QNSG__PkJtqr","executionInfo":{"status":"ok","timestamp":1635781437737,"user_tz":0,"elapsed":3788,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"2501a4a0-6c0d-4942-a043-9ec921f33cf9"},"source":["import os\n","import time\n","from typing import List, Tuple\n","from multiprocessing import Pool\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","def cube(x: List[int]):\n","    print(f\"start process {os.getpid()}: {x}\")\n","    result = x\n","    time.sleep(1)\n","    \n","    with open(tmp_file, \"a\") as f:\n","        f.write(f\"{result}\\n\")\n","    print(f\"end process {os.getpid()}: {x}\")\n","    \n","    return result\n","    \n","\n","if __name__ == \"__main__\":\n","    data = list(range(12))\n","    # [0, 1, 2, 3, ..., 11]\n","    result = []\n","    \n","    with Pool(processes=4) as pool:\n","        for each_item in pool.imap_unordered(cube, enumerate(data)):\n","            result.append(each_item)\n","            print(f\"##### current process #####: {os.getpid()}\")\n","    \n","    pool.join()  # wait for the worker processes to terminate\n","\n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n","    print(f\"results: {result}\")\n","    print(f\"final process: {os.getpid()}\")"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["start process 217: (0, 0)\n","start process 219: (2, 2)\n","start process 218: (1, 1)\n","start process 220: (3, 3)\n","end process 217: (0, 0)\n","end process 219: (2, 2)\n","end process 218: (1, 1)\n","start process 217: (4, 4)\n","end process 220: (3, 3)\n","start process 220: (6, 6)\n","start process 218: (7, 7)\n","start process 219: (5, 5)\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","end process 220: (6, 6)\n","start process 220: (8, 8)\n","end process 217: (4, 4)\n","end process 218: (7, 7)\n","end process 219: (5, 5)\n","start process 217: (10, 10)\n","start process 218: (9, 9)\n","start process 219: (11, 11)\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","end process 220: (8, 8)\n","end process 217: (10, 10)\n","end process 218: (9, 9)\n","end process 219: (11, 11)\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","##### current process #####: 66\n","show content: ['(0, 0)\\n', '(2, 2)\\n', '(1, 1)\\n', '(3, 3)\\n', '(6, 6)\\n', '(7, 7)\\n', '(5, 5)\\n', '(4, 4)\\n', '(8, 8)\\n', '(10, 10)\\n', '(9, 9)\\n', '(11, 11)\\n']\n","results: [(0, 0), (2, 2), (3, 3), (1, 1), (6, 6), (7, 7), (4, 4), (5, 5), (8, 8), (10, 10), (11, 11), (9, 9)]\n","final process: 66\n"]}]},{"cell_type":"markdown","metadata":{"id":"rsweia3JB8rj"},"source":["### `imap_unordered` with `pd.DataFrame`\n","This is not recommended. Code is tricky\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"QrxMvuryATOD","executionInfo":{"elapsed":245,"status":"ok","timestamp":1634403164254,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"5c2b2d8f-d32c-4bba-d389-c4bf4185f0e1"},"source":["import pandas as pd\n","data = {\"a\": [2]*5, \"b\": list(range(5))}\n","df = pd.DataFrame.from_dict(data)\n","df"],"execution_count":null,"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>a</th>\n","      <th>b</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   a  b\n","0  2  0\n","1  2  1\n","2  2  2\n","3  2  3\n","4  2  4"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7g_y9PWiAa0y","executionInfo":{"elapsed":6,"status":"ok","timestamp":1634403164501,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"4078dbf2-16a4-42b1-cae9-acae74da950f"},"source":["it = df.iterrows()\n","it"],"execution_count":null,"outputs":[{"data":{"text/plain":["<generator object DataFrame.iterrows at 0x7f00a4b6c450>"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1IFFwfviA33W","executionInfo":{"elapsed":213,"status":"ok","timestamp":1634403165570,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"8b816e28-a4ca-4571-bb92-c4255ef95abb"},"source":["tmp = next(it)[1]\n","tmp"],"execution_count":null,"outputs":[{"data":{"text/plain":["a    2\n","b    0\n","Name: 0, dtype: int64"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UOqqYR8zBc4W","executionInfo":{"elapsed":202,"status":"ok","timestamp":1634403236036,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"669803fe-a12c-4b00-ef7b-97494c744c0e"},"source":["print(isinstance(tmp, pd.Series))\n","type(tmp)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["True\n"]},{"data":{"text/plain":["pandas.core.series.Series"]},"execution_count":43,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xdeKWP1N_pLC","executionInfo":{"status":"ok","timestamp":1634562897250,"user_tz":-60,"elapsed":2258,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"}},"outputId":"c8cabc2b-50fe-4d38-ad2e-7bd45b704e3f"},"source":["import os\n","import time\n","from typing import List, Tuple\n","from multiprocessing import Pool\n","\n","import pandas as pd\n","\n","tmp_file = \"cube.txt\"\n","\n","try:\n","    os.remove(tmp_file)\n","except OSError:\n","    pass\n","\n","\n","def cube(x: pd.Series):\n","    print(f\"start process {x}\")\n","    x = x[1]\n","    result = x.a * x.b\n","    time.sleep(1)\n","    print(f\"end process {x}\")\n","    \n","    # save order won't be guaranteed\n","    with open(tmp_file, \"a\") as f:\n","        f.write(f\"{result}\\n\")\n","    # return result\n","\n","if __name__ == \"__main__\":\n","    data = {\"a\": [2]*5, \"b\": list(range(5))}\n","    df = pd.DataFrame.from_dict(data)\n","    \n","    with Pool(processes=4) as pool:\n","\n","      for each_item in pool.imap_unordered(cube, df.iterrows()):  # using iterrows()\n","          each_item\n","    # pool.join()\n","    print(\"this should be 2nd last line\")\n","\n","    with open(tmp_file, \"r\") as f:\n","        content = f.readlines()\n","    print(f\"show content: {content}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["start process (0, a    2\n","b    0\n","Name: 0, dtype: int64)\n","start process (2, a    2\n","b    2\n","Name: 2, dtype: int64)start process (1, a    2\n","b    1\n","Name: 1, dtype: int64)start process (3, a    2\n","b    3\n","Name: 3, dtype: int64)\n","\n","\n","end process a    2\n","b    0\n","Name: 0, dtype: int64\n","start process (4, a    2\n","b    4\n","Name: 4, dtype: int64)\n","end process a    2\n","b    1\n","Name: 1, dtype: int64\n","end process a    2\n","b    2\n","Name: 2, dtype: int64end process a    2\n","b    3\n","Name: 3, dtype: int64\n","\n","end process a    2\n","b    4\n","Name: 4, dtype: int64\n","this should be 2nd last line\n","show content: ['0\\n', '2\\n', '4\\n', '6\\n', '8\\n']\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"FOJAf-cjKghB","executionInfo":{"elapsed":18,"status":"ok","timestamp":1634418343738,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"c1e0ec38-c692-49e8-972d-890833b8a4cc"},"source":["import pandas as pd\n","data = {\"a\": [2]*5, \"b\": list(range(5))}\n","df = pd.DataFrame.from_dict(data)\n","df"],"execution_count":null,"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>a</th>\n","      <th>b</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   a  b\n","0  2  0\n","1  2  1\n","2  2  2\n","3  2  3\n","4  2  4"]},"execution_count":59,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"VUfzYs7OKlEu","executionInfo":{"elapsed":16,"status":"ok","timestamp":1634418343739,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"89e87884-69a3-4571-dd49-dcd22296b0df"},"source":["for a, b in df.items():\n","    print(a)\n","    print(b)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["a\n","0    2\n","1    2\n","2    2\n","3    2\n","4    2\n","Name: a, dtype: int64\n","b\n","0    0\n","1    1\n","2    2\n","3    3\n","4    4\n","Name: b, dtype: int64\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R_WdviAPLFih","executionInfo":{"elapsed":205,"status":"ok","timestamp":1634405737047,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"d2de2824-960e-46aa-87ea-9a4f8e3a6e8b"},"source":["b"],"execution_count":null,"outputs":[{"data":{"text/plain":["0    0\n","1    1\n","2    2\n","3    3\n","4    4\n","Name: b, dtype: int64"]},"execution_count":57,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"sNxwtBQNKk2O","executionInfo":{"elapsed":223,"status":"ok","timestamp":1634405727221,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"beb1cdce-240e-4b07-8d8b-f20ef601e171"},"source":["a"],"execution_count":null,"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'b'"]},"execution_count":56,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"nUg5z1ma9eln"},"source":["## Multi-process data sharing and communication"]},{"cell_type":"code","metadata":{"id":"vSmZTQvvbae1"},"source":["from multiprocessing import Process, Queue\n","import os, time, random\n","\n","\n","# 写数据进程执行的代码:\n","def write(q):\n","    print('Process to write: {}'.format(os.getpid()))\n","    for value in ['A', 'B', 'C']:\n","        print('Put %s to queue...' % value)\n","        q.put(value)\n","        time.sleep(random.random())\n","\n","# 读数据进程执行的代码:\n","def read(q):\n","    print('Process to read:{}'.format(os.getpid()))\n","    while True:\n","        value = q.get(True)\n","        print('Get %s from queue.' % value)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vpwRGi2UcwIi","executionInfo":{"elapsed":2046,"status":"ok","timestamp":1621542247346,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"21ed8efa-56b0-411f-e9c3-804fbc8e09ee"},"source":["if __name__=='__main__':\n","    # 父进程创建Queue，并传给各个子进程：\n","    q = Queue()\n","    pw = Process(target=write, args=(q,))\n","    pr = Process(target=read, args=(q,))\n","    # 启动子进程pw，写入:\n","    pw.start()\n","    # 启动子进程pr，读取:\n","    pr.start()\n","    # 等待pw结束:\n","    pw.join()\n","    # pr进程里是死循环，无法等待其结束，只能强行终止:\n","    pr.terminate()"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Process to write: 623\n","Process to read:624\n","Put A to queue...\n","Get A from queue.\n","Put B to queue...\n","Get B from queue.\n","Put C to queue...\n","Get C from queue.\n"]}]},{"cell_type":"markdown","metadata":{"id":"vz8k5hUS0HEm"},"source":["Example"]},{"cell_type":"code","metadata":{"id":"0fR-wLfJ2lBt"},"source":["from multiprocessing import cpu_count, Pool, Process, Queue\n","\n","l = list(range(20))\n","q1 = Queue()\n","q2 = Queue()\n","\n","def producer(q1, l):\n","  for i in l:\n","    q1.put(i)\n","  print(\"producer done\")\n","\n","def long_time_task(i):\n","  print(f\"pid: {os.getpid()}\")\n","  return i**10\n","\n","def worker():\n","  p = Pool(cpu_count())\n","  print(f\"#cpus: {cpu_count()}\")\n","  for i in range(5):\n","    while q1.qsize() > 0:\n","      input = q1.get()\n","      res = p.apply_async(long_time_task, args=(input,))\n","      print(f\"res: {res.get()}\")\n","      q2.put(res.get())\n","\n","  print('等待所有子进程完成。')  \n","  p.close()\n","  p.join()\n","  print(\"worker done\")\n","\n","  # p = Pool(cpu_count())\n","  # for i in range(5):\n","  #     p.apply_async(long_time_task, args=(i,))\n","  \n","  # print('等待所有子进程完成。')\n","  # p.close()\n","  # p.join()\n","\n","def receiver(q2):\n","  res = []\n","  while q2.qsize() > 0:\n","    res.append(q2.get())\n","  return res"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HnTxk5N2_wob","executionInfo":{"elapsed":3,"status":"ok","timestamp":1621590159501,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"b056e78e-410f-4870-9fca-479780efaf63"},"source":["producer(q1, l)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["producer done\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SigszJ7f_wej","executionInfo":{"elapsed":8,"status":"ok","timestamp":1621590160662,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"6962c88f-b439-4934-f722-19e8aa57e4c4"},"source":["worker()"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","pid: 1126\n","pid: 1127\n","#cpus: 2\n","res: 0\n","res: 1\n","res: 1024\n","res: 59049\n","res: 1048576\n","res: 9765625\n","res: 60466176\n","res: 282475249\n","res: 1073741824\n","res: 3486784401\n","res: 10000000000\n","res: 25937424601\n","res: 61917364224\n","res: 137858491849\n","res: 289254654976\n","res: 576650390625\n","res: 1099511627776\n","res: 2015993900449\n","res: 3570467226624\n","res: 6131066257801\n","等待所有子进程完成。\n","worker done\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kAYtYDBd_wVL","executionInfo":{"elapsed":393,"status":"ok","timestamp":1621590164285,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"0628c87c-c1b3-455a-e197-a938214ae221"},"source":["worker()"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["#cpus: 2\n","等待所有子进程完成。\n","worker done\n"]}]},{"cell_type":"code","metadata":{"id":"VSMI2jDR9BoG"},"source":["res = receiver(q2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5nxB0fam_-_K","executionInfo":{"elapsed":275,"status":"ok","timestamp":1621590167468,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"ecb4f132-45a2-4e1e-bfad-d51f66be59bd"},"source":["res"],"execution_count":null,"outputs":[{"data":{"text/plain":["[0,\n"," 1,\n"," 1024,\n"," 59049,\n"," 1048576,\n"," 9765625,\n"," 60466176,\n"," 282475249,\n"," 1073741824,\n"," 3486784401,\n"," 10000000000,\n"," 25937424601,\n"," 61917364224,\n"," 137858491849,\n"," 289254654976,\n"," 576650390625,\n"," 1099511627776,\n"," 2015993900449,\n"," 3570467226624,\n"," 6131066257801]"]},"execution_count":125,"metadata":{"tags":[]},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"T3irzOijQo2S"},"source":["## Multi-processing Quick Implementation\n","- [How to utilize all cores with python multiprocessing](https://stackoverflow.com/a/19098791)\n","- [imap_unordered](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.imap_unordered)\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DfRtaz2OQriA","executionInfo":{"elapsed":179,"status":"ok","timestamp":1622646566458,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"296bc53d-fc7f-476a-a461-720c1ec23a0c"},"source":["import multiprocessing\n","from multiprocessing import cpu_count\n","\n","def get_reconciliation_state_attributes(single_input):\n","  return single_input\n","\n","events = []\n","grouping_messages = [1, 2, 3]\n","\n","with multiprocessing.Pool(cpu_count()) as pool:\n","  for event in pool.imap_unordered(get_reconciliation_state_attributes, grouping_messages):\n","    events.append(event)\n","\n","print(events)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 2, 3]\n"]}]},{"cell_type":"markdown","metadata":{"id":"llvfxqvxLT_-"},"source":["# Test"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ev85EivYLVdy","executionInfo":{"elapsed":323,"status":"ok","timestamp":1634289890468,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"d32a3544-c0c4-4258-d63f-912ec6a2a1fd"},"source":["from multiprocessing import Pool\n","import time\n","\n","def f(x):\n","    return x*x\n","\n","if __name__ == '__main__':\n","    with Pool(processes=4) as pool:         # start 4 worker processes\n","        result = pool.apply_async(f, (10,)) # evaluate \"f(10)\" asynchronously in a single process\n","        print(result.get(timeout=1))        # prints \"100\" unless your computer is *very* slow\n","\n","        res_map = pool.map(f, range(10))\n","        print(res_map)       # prints \"[0, 1, 4,..., 81]\"\n","\n","        it = pool.imap(f, range(10))\n","        print(next(it))                     # prints \"0\"\n","        print(next(it))                     # prints \"1\"\n","        print(it.next(timeout=1))           # prints \"4\" unless your computer is *very* slow\n","\n","        # result = pool.apply_async(time.sleep, (10,))\n","        # print(result.get(timeout=1))        # raises multiprocessing.TimeoutError"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["100\n","[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n","0\n","1\n","4\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8zQzfhXHQ44L","executionInfo":{"elapsed":483,"status":"ok","timestamp":1634289852664,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"db2f58bb-f47b-46f0-b865-4747d363ff4b"},"source":["res_map"],"execution_count":null,"outputs":[{"data":{"text/plain":["[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MQGmNaL3RCN8","executionInfo":{"elapsed":417,"status":"ok","timestamp":1634289858198,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"17c912ce-8662-4fe4-fed7-7f958500be22"},"source":["it"],"execution_count":null,"outputs":[{"data":{"text/plain":["<multiprocessing.pool.IMapIterator at 0x7f3826b3a290>"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPSS8GISQwtc","executionInfo":{"elapsed":395,"status":"ok","timestamp":1634289814264,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"d3519604-3c20-4462-e52a-22d6cbb92749"},"source":["result"],"execution_count":null,"outputs":[{"data":{"text/plain":["<multiprocessing.pool.ApplyResult at 0x7f3826eeaf50>"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"z2jSZgiDcxJ3"},"source":["# Multi-threading"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b8yBLqrUfmtJ","executionInfo":{"elapsed":143,"status":"ok","timestamp":1621543005277,"user":{"displayName":"","photoUrl":"","userId":""},"user_tz":-60},"outputId":"8bcf8a23-13d7-42c7-d36c-db21221554aa"},"source":["import threading\n","import time\n","\n","\n","def long_time_task(i):\n","    print('当前子线程: {} - 任务{}'.format(threading.current_thread().name, i))\n","    time.sleep(2)\n","    print(\"结果: {}\".format(8 ** 20))\n","\n","\n","if __name__=='__main__':\n","    start = time.time()\n","    print('这是主线程：{}'.format(threading.current_thread().name))\n","    t1 = threading.Thread(target=long_time_task, args=(1,))\n","    t2 = threading.Thread(target=long_time_task, args=(2,))\n","    t1.start()\n","    t2.start()\n","\n","    end = time.time()\n","    print(\"总共用时{}秒\".format((end - start)))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["这是主线程：MainThread\n","当前子线程: Thread-20 - 任务1\n","当前子线程: Thread-21 - 任务2\n","总共用时0.005774021148681641秒\n"]}]},{"cell_type":"markdown","metadata":{"id":"k-O68BOyaqOU"},"source":["# testfixtures"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2rdFW0SRaix2","executionInfo":{"elapsed":4189,"status":"ok","timestamp":1621592031803,"user":{"displayName":"Chet Sheng","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjy_Dk7Ahwv2lZiGE0sUFyBO_xe7OiTtIJ9Qlezaw=s64","userId":"02447232751254445182"},"user_tz":-60},"outputId":"9b6ee620-1996-4aaa-e2df-42b95b97d384"},"source":["pip install testfixtures"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting testfixtures\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/9c/93/08cbd1203cd490ac789f42a9594540d1b6c4d8fca6c2d06296b284518052/testfixtures-6.17.1-py2.py3-none-any.whl (95kB)\n","\r\u001b[K     |███▌                            | 10kB 15.9MB/s eta 0:00:01\r\u001b[K     |███████                         | 20kB 22.2MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 30kB 11.3MB/s eta 0:00:01\r\u001b[K     |█████████████▉                  | 40kB 8.8MB/s eta 0:00:01\r\u001b[K     |█████████████████▎              | 51kB 5.5MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 61kB 6.5MB/s eta 0:00:01\r\u001b[K     |████████████████████████▏       | 71kB 6.1MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▋    | 81kB 6.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 92kB 6.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 102kB 4.1MB/s \n","\u001b[?25hInstalling collected packages: testfixtures\n","Successfully installed testfixtures-6.17.1\n"]}]},{"cell_type":"code","metadata":{"id":"CNw5fr5LfqhL"},"source":["import logging\n","from testfixtures import LogCapture\n","with LogCapture() as l:\n","    logger = logging.getLogger()\n","    logger.info('a message')\n","    logger.error('an error')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xBaXfDuYahYy"},"source":[""],"execution_count":null,"outputs":[]}]}